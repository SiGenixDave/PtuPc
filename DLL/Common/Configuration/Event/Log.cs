#region --- Revision History ---
/*
 * 
 *  This document and its contents are the property of Bombardier Inc. or its subsidiaries and contains confidential, proprietary information.
 *  The reproduction, distribution, utilization or the communication of this document, or any part thereof, without express authorization is strictly prohibited.  
 *  Offenders will be held liable for the payment of damages.
 * 
 *  (C) 2010    Bombardier Inc. or its subsidiaries. All rights reserved.
 * 
 *  Solution:   Portable Test Unit
 * 
 *  Project:    Common
 * 
 *  File name:  Log.cs
 * 
 *  Revision History
 *  ----------------
 *  Date        Version Author          Comments
 *  10/27/10    1.0     K.McD           1.  First entry into TortoiseSVN.
 * 
 *  01/26/11    1.1     K.McD           1.  Added support for the configuration of the fault log data streams from the data dictionary.
 * 
 *  02/15/11    1.2     K.McD           1.  Removed the DataStreamCount property as the data stream number associated with each event record is now derived 
 *                                          directly from the call to the PTUDLL32.GetFaultHdr() method, see version 1.12.2 of event.dll.
 *                                          
 *  06/22/11    1.3     K.McD           1.  Corrected a number of XML tags.
 *
 */
#endregion --- Revision History ---

using System.Diagnostics;

namespace Common.Configuration
{
    /// <summary>
    /// A structure to store the fields associated with an entry from the <c>LOGS</c> table of the data dictionary.
    /// </summary>
    public class Log : Record
    {
        #region --- Member Variables ---
        #region - [Data Dictionary] -
        /// <summary>
        /// The description of the log.
        /// </summary>
        private string m_Description;

        /// <summary>
        /// The type identifier associated with the data stream that is generated by the log.
        /// </summary>
        private short m_DataStreamTypeIdentifier;

        /// <summary>
        /// The parameters associated with the type of data stream that is generated by the log.
        /// </summary>
        private DataStreamTypeParameters_t m_DataStreamTypeParameters;
        #endregion - [Data Dictionary] -

        #region - [VCU] -
        /// <summary>
        /// The interval, in ms, at which the data is sampled for this log.
        /// </summary>
        private short m_SampleIntervalMs;

        /// <summary>
        /// A flag that indicates whether new events have been added to the log. True, indicates that new events have been added; false, indicates that no new events 
        /// have occurred.
        /// </summary>
        private short m_ChangeStatus;

        /// <summary>
        /// The maximum number of tasks associated with the log.
        /// </summary>
        private short m_MaxTasks;

        /// <summary>
        /// The maximum number of events per task.
        /// </summary>
        private short m_MaxEventsPerTask;
        #endregion - [VCU] -
        #endregion --- Member Variables ---

        #region --- Constructors ---
        /// <summary>
        /// Initialize a new instance of the class. 
        /// </summary>
        public Log()
        {
            Identifier = 0;
            HelpIndex = 0;
            m_Description = string.Empty;
            m_DataStreamTypeIdentifier = Parameter.DefaultDataStreamTypeIdentifier;
            m_DataStreamTypeParameters.SetToDefaulDataStreamType();

            #region - [VCU Fields] -
            m_SampleIntervalMs = 0;
            m_ChangeStatus = 0;
            m_MaxTasks = 0;
            m_MaxEventsPerTask = 0;
            #endregion - [VCU Fields] -
        }
        #endregion --- Constructors ---

        #region --- Methods ---
        /// <summary>
        /// Override the ToString() method to return the description of the log.
        /// </summary>
        /// <returns>The log description.</returns>
        public override string ToString()
        {
            return Description;
        }
        #endregion --- Methods ---

        #region --- Properties ---
        #region - [Data Dictionary] -
        /// <summary>
        /// Gets or sets the description of the log.
        /// </summary>
        public string Description
        {
            get { return m_Description; }
            set { m_Description = value; }
        }

        /// <summary>
        /// Gets or sets the data stream type identifier associated with the data stream that is generated by the log.
        /// </summary>
        public short DataStreamTypeIdentifier
        {
            get { return m_DataStreamTypeIdentifier; }
            set { m_DataStreamTypeIdentifier = value; }
        }

        /// <summary>
        /// Gets or sets the parameters associated with the type of data stream that is generated by the log.
        /// </summary>
        public DataStreamTypeParameters_t DataStreamTypeParameters
        {
            get { return m_DataStreamTypeParameters; }
            set { m_DataStreamTypeParameters = value; }
        }
        #endregion - [Data Dictionary] -

        #region - [VCU] -
        /// <summary>
        /// Gets or sets the interval, in ms, at which the data is sampled for this log.
        /// </summary>
        public short SampleIntervalMs
        {
            get { return m_SampleIntervalMs; }
            set { m_SampleIntervalMs = value; }
        }

        /// <summary>
        /// Gets or sets the flag that indicates whether new events have been added to the log. True, indicates that new events have been added; false, indicates that no new events have occurred.
        /// </summary>
        public short ChangeStatus
        {
            get { return m_ChangeStatus; }
            set { m_ChangeStatus = value; }
        }

        /// <summary>
        /// Gets or sets the maximum number of tasks associated with the log.
        /// </summary>
        public short MaxTasks
        {
            get { return m_MaxTasks; }
            set { m_MaxTasks = value; }
        }

        /// <summary>
        /// Gets or sets the maximum number of events per task.
        /// </summary>
        public short MaxEventsPerTask
        {
            get { return m_MaxEventsPerTask; }
            set { m_MaxEventsPerTask = value; }
        }
        #endregion - [VCU] -
        #endregion --- Properties ---
    }
}
